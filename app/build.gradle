import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}
//
//tasks.withType(Test) {
//    testLogging {
//        // set options for log level LIFECYCLE
//        events TestLogEvent.FAILED,
//                TestLogEvent.PASSED,
//                TestLogEvent.SKIPPED,
//                TestLogEvent.STANDARD_OUT
//        exceptionFormat TestExceptionFormat.FULL
//        showExceptions true
//        showCauses true
//        showStackTraces true
//
//        // set options for log level DEBUG and INFO
//        debug {
//            events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat TestExceptionFormat.FULL
//        }
//        info.events = debug.events
//        info.exceptionFormat = debug.exceptionFormat
//
//        afterSuite { desc, result ->
//            if (!desc.parent) { // will match the outermost suite
//                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//                def startItem = '|  ', endItem = '  |'
//                def repeatLength = startItem.length() + output.length() + endItem.length()
//                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//            }
//        }
//    }
//}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories.setFrom(files([mainSrc]))
//    classDirectories.setFrom(files([debugTree]))
//    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ]))
//}

apply from: "$project.rootDir/jacoco.gradle"

android {
    compileSdkVersion 30
    compileSdk 31

    defaultConfig {
        applicationId "com.neijr.calculatefuelconsumption"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'



    implementation "androidx.fragment:fragment-ktx:1.3.6"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    testImplementation 'org.robolectric:robolectric:4.3'

    // Dependence principal of Mockito
    testImplementation 'org.mockito:mockito-core:3.12.4'
    // Dependence of Mockito to tests in Android
    androidTestImplementation 'org.mockito:mockito-android:3.12.4'
    // Dependence of Mockito to is possible mock classes and methods constants
    testImplementation 'org.mockito:mockito-inline:3.12.4'
}